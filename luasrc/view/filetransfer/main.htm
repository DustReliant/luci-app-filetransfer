<%#
 Copyright 2024 DustReliant
 Licensed to the public under the MIT License.
-%>

<%+header%>

<div class="cbi-map">
    <h2 name="content"><%:File Transfer%></h2>

<div class="cbi-section">
        <div class="cbi-section-descr"><%:Upload and manage files through Web interface%></div>
    
    <!-- Êñá‰ª∂‰∏ä‰º†Âå∫Âüü -->
    <div class="upload-area" id="upload-area">
        <div class="upload-zone" id="upload-zone">
            <div class="upload-icon">üìÅ</div>
            <p class="upload-title"><%:Drag files here or click to upload%></p>
            <p class="upload-hint"><%:Supported file types: ipk, tar, gz, zip, txt, conf, json%></p>
            <p class="upload-hint"><%:Maximum file size: 50MB%></p>
            <input type="file" id="fileInput" multiple accept=".ipk,.tar,.gz,.zip,.txt,.conf,.json" style="display: none;" />
            <button class="btn btn-primary upload-btn" onclick="document.getElementById('fileInput').click()">
                <i class="icon-upload"></i> <%:Upload%>
            </button>
        </div>
        <div class="progress-container" id="progress-container" style="display: none;">
            <div class="progress-bar">
                <div class="progress-fill" id="progress-fill"></div>
            </div>
            <span class="progress-text" id="progress-text">0%</span>
        </div>
    </div>

    <!-- Êñá‰ª∂ÂàóË°® -->
        <div class="file-list-section">
            <div class="section-header">
                <h3><%:File List%></h3>
                <div class="file-controls">
                    <div class="search-box">
                        <i class="icon-search"></i>
                        <input type="text" id="file-search" placeholder="<%:Search files...%>">
                    </div>
                    <button class="btn btn-secondary refresh-btn" onclick="refreshFileList()">
                        <i class="icon-refresh"></i> <%:Refresh%>
                    </button>
                    <button class="btn btn-warning" onclick="clearAllFiles()" title="<%:Clear all files%>">
                        <i class="icon-trash"></i> <%:Clear All%>
                    </button>
                </div>
            </div>
            <div class="file-table-container">
                <table class="file-table" id="file-table">
            <thead>
                <tr>
                            <th><%:File Name%></th>
                            <th><%:Size%></th>
                            <th><%:Modify Time%></th>
                            <th><%:Actions%></th>
                </tr>
            </thead>
                    <tbody id="file-table-body">
                        <!-- Êñá‰ª∂ÂàóË°®Â∞ÜÈÄöËøá JavaScript Âä®ÊÄÅÁîüÊàê -->
            </tbody>
        </table>
            </div>
        </div>
    </div>
</div>

<style>
/* ÂÖ®Â±ÄÊ†∑Âºè */
.cbi-map {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    min-height: 100vh;
    padding: 20px;
}

.cbi-section {
    background: rgba(255, 255, 255, 0.95);
    border-radius: 20px;
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
    backdrop-filter: blur(10px);
    padding: 30px;
    margin-bottom: 30px;
}

.cbi-section-descr {
    color: #666;
    font-size: 16px;
    margin-bottom: 30px;
    text-align: center;
}

/* ‰∏ä‰º†Âå∫ÂüüÊ†∑Âºè */
.upload-area {
    margin: 30px 0;
    display: flex;
    flex-direction: column;
    align-items: center;
}

.upload-zone {
    border: 3px dashed #667eea;
    border-radius: 15px;
    padding: 15px 25px;
    text-align: center;
    background: linear-gradient(135deg, #f8f9ff 0%, #e8f2ff 100%);
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    cursor: pointer;
    box-shadow: 0 8px 20px rgba(102, 126, 234, 0.1);
    position: relative;
    width: 100%;
    max-width: 450px;
    min-height: 100px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    gap: 3px;
}

.upload-zone:hover,
.upload-zone.dragover {
    border-color: #764ba2;
    background: linear-gradient(135deg, #e8f2ff 0%, #f8f9ff 100%);
    box-shadow: 0 20px 40px rgba(102, 126, 234, 0.2);
    transform: translateY(-3px);
}

.upload-icon {
    font-size: 28px;
    margin: 0;
    color: #667eea;
    animation: float 3s ease-in-out infinite;
}

@keyframes float {
    0%, 100% { transform: translateY(0px); }
    50% { transform: translateY(-3px); }
}

.upload-title {
    font-size: 13px;
    font-weight: 600;
    color: #333;
    margin: 0;
    line-height: 1.3;
}

.upload-hint {
    font-size: 10px;
    color: #888;
    margin: 0;
    line-height: 1.1;
}

.upload-btn {
    margin-top: 5px;
    padding: 6px 14px;
    font-size: 12px;
    font-weight: 600;
    border-radius: 20px;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border: none;
    color: white;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 3px 10px rgba(102, 126, 234, 0.3);
}

.upload-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
}

/* ËøõÂ∫¶Êù°Ê†∑Âºè */
.progress-container {
    margin-top: 30px;
    width: 100%;
    max-width: 500px;
}

.progress-bar {
    width: 100%;
    height: 12px;
    background: linear-gradient(90deg, #f0f0f0 0%, #e0e0e0 100%);
    border-radius: 10px;
    overflow: hidden;
    position: relative;
    box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.1);
}

.progress-fill {
    height: 100%;
    background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
    transition: width 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    width: 0%;
    border-radius: 10px;
    position: relative;
}

.progress-fill::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(90deg, transparent 0%, rgba(255,255,255,0.3) 50%, transparent 100%);
    animation: shimmer 2s infinite;
}

@keyframes shimmer {
    0% { transform: translateX(-100%); }
    100% { transform: translateX(100%); }
}

.progress-text {
    display: block;
    text-align: center;
    margin-top: 10px;
    font-weight: 600;
    color: #667eea;
}

/* Êñá‰ª∂ÂàóË°®Ê†∑Âºè */
.file-list-section {
    margin-top: 40px;
}

.section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    flex-wrap: wrap;
    gap: 15px;
}

.section-header h3 {
    margin: 0;
    color: #333;
    font-size: 20px;
    font-weight: 600;
}

.file-controls {
    display: flex;
    gap: 10px;
    align-items: center;
    flex-wrap: wrap;
}

.search-box {
    position: relative;
    display: flex;
    align-items: center;
}

.search-box i {
    position: absolute;
    left: 12px;
    color: #999;
    z-index: 1;
}

.search-box input {
    padding: 8px 12px 8px 35px;
    border: 2px solid #e0e0e0;
    border-radius: 25px;
    font-size: 14px;
    transition: all 0.3s ease;
    background: white;
}

.search-box input:focus {
    outline: none;
    border-color: #667eea;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
}

.btn {
    padding: 8px 16px;
    border: none;
    border-radius: 20px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
    display: inline-flex;
    align-items: center;
    gap: 5px;
    text-decoration: none;
    color: white;
}

.btn-primary {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
}

.btn-secondary {
    background: linear-gradient(135deg, #6c757d 0%, #495057 100%);
}

.btn-success {
    background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
}

.btn-warning {
    background: linear-gradient(135deg, #ffc107 0%, #fd7e14 100%);
    color: #333;
}

.btn-danger {
    background: linear-gradient(135deg, #dc3545 0%, #c82333 100%);
}

.btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
}

.file-table-container {
    background: white;
    border-radius: 15px;
    overflow: hidden;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
}

.file-table {
    width: 100%;
    border-collapse: collapse;
    margin: 0;
}

.file-table th {
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    padding: 15px;
    text-align: left;
    font-weight: 600;
    color: #333;
    border-bottom: 2px solid #dee2e6;
}

.file-table td {
    padding: 12px 15px;
    border-bottom: 1px solid #f1f3f4;
    vertical-align: middle;
}

.file-table tbody tr:hover {
    background: linear-gradient(135deg, #f8f9ff 0%, #e8f2ff 100%);
}

.file-type-icon {
    font-size: 20px;
    margin-right: 10px;
    vertical-align: middle;
}

.file-actions {
    display: flex;
    gap: 5px;
    flex-wrap: wrap;
}

.file-actions .btn {
    padding: 6px 12px;
    font-size: 12px;
}

/* Ê∂àÊÅØÊèêÁ§∫Ê†∑Âºè */
.message {
    position: fixed;
    top: 20px;
    right: 20px;
    padding: 15px 20px;
    border-radius: 10px;
    color: white;
    font-weight: 500;
    z-index: 1000;
    transform: translateX(100%);
    transition: transform 0.3s ease;
    max-width: 300px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
}

.message.show {
    transform: translateX(0);
}

.message.success {
    background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
}

.message.error {
    background: linear-gradient(135deg, #dc3545 0%, #c82333 100%);
}

.message.warning {
    background: linear-gradient(135deg, #ffc107 0%, #fd7e14 100%);
    color: #333;
}

/* ÂìçÂ∫îÂºèËÆæËÆ° */
@media (max-width: 768px) {
    .cbi-section {
        padding: 20px;
        margin: 10px;
    }
    
    .upload-zone {
        padding: 40px 20px;
    }
    
    .upload-title {
        font-size: 20px;
    }
    
    .section-header {
        flex-direction: column;
        align-items: stretch;
    }
    
    .file-controls {
        justify-content: center;
    }
    
    .file-table {
        font-size: 14px;
    }
    
    .file-table th,
    .file-table td {
        padding: 8px 10px;
    }
    
    .file-actions {
        flex-direction: column;
    }
    
    .file-actions .btn {
        width: 100%;
        justify-content: center;
    }
}

/* ÈîôËØØÊó•ÂøóÈù¢ÊùøÊ†∑Âºè */
.error-log-panel {
    position: fixed;
    bottom: 20px;
    right: 20px;
    width: 400px;
    max-height: 300px;
    background: rgba(0, 0, 0, 0.9);
    color: #fff;
    border-radius: 10px;
    padding: 15px;
    font-family: monospace;
    font-size: 12px;
    overflow-y: auto;
    z-index: 1001;
    display: none;
}

.error-log-panel.show {
    display: block;
}

.error-log-panel h4 {
    margin: 0 0 10px 0;
    color: #ff6b6b;
}

.error-log-entry {
    margin-bottom: 8px;
    padding: 5px;
    border-left: 3px solid #ff6b6b;
    background: rgba(255, 107, 107, 0.1);
}

.error-log-time {
    color: #aaa;
    font-size: 10px;
}

.error-log-message {
    color: #ff6b6b;
    word-break: break-all;
}
</style>

<script>
// ÂÖ®Â±ÄÈîôËØØÊçïËé∑ÂíåÊó•ÂøóËÆ∞ÂΩïÁ≥ªÁªü
(function() {
    'use strict';
    
    // ÈîôËØØÊó•ÂøóÂ≠òÂÇ®
    window.errorLog = [];
    const MAX_ERROR_LOG_SIZE = 50;
    
    // ÂàõÂª∫ÈîôËØØÊó•ÂøóÈù¢Êùø
    function createErrorLogPanel() {
        const panel = document.createElement('div');
        panel.className = 'error-log-panel';
        panel.id = 'error-log-panel';
        panel.innerHTML = `
            <h4>üîç ÈîôËØØÊó•ÂøóÁõëÊéß</h4>
            <div id="error-log-content"></div>
            <button onclick="toggleErrorLog()" style="margin-top: 10px; padding: 5px 10px; background: #333; color: white; border: none; border-radius: 5px; cursor: pointer;">ÂàáÊç¢ÊòæÁ§∫</button>
        `;
        document.body.appendChild(panel);
    }
    
    // ÂàáÊç¢ÈîôËØØÊó•ÂøóÊòæÁ§∫
    window.toggleErrorLog = function() {
        const panel = document.getElementById('error-log-panel');
        panel.classList.toggle('show');
    };
    
    // Ê∑ªÂä†ÈîôËØØÊó•Âøó
    function addErrorLog(type, message, details = null) {
        const timestamp = new Date().toLocaleString();
        const errorEntry = {
            timestamp: timestamp,
            type: type,
            message: message,
            details: details,
            url: window.location.href,
            userAgent: navigator.userAgent
        };
        
        window.errorLog.push(errorEntry);
        
        // ÈôêÂà∂Êó•ÂøóÂ§ßÂ∞è
        if (window.errorLog.length > MAX_ERROR_LOG_SIZE) {
            window.errorLog.shift();
        }
        
        // Êõ¥Êñ∞ÊòæÁ§∫
        updateErrorLogDisplay();
        
        // ÂèëÈÄÅÂà∞ÊúçÂä°Âô®
        sendErrorToServer(errorEntry);
        
        // ÊéßÂà∂Âè∞ËæìÂá∫
        console.error(`[${timestamp}] ${type}: ${message}`, details);
    }
    
    // Êõ¥Êñ∞ÈîôËØØÊó•ÂøóÊòæÁ§∫
    function updateErrorLogDisplay() {
        const content = document.getElementById('error-log-content');
        if (!content) return;
        
        content.innerHTML = window.errorLog.map(entry => `
            <div class="error-log-entry">
                <div class="error-log-time">${entry.timestamp}</div>
                <div class="error-log-message">[${entry.type}] ${entry.message}</div>
                ${entry.details ? `<div style="color: #ccc; font-size: 10px;">${JSON.stringify(entry.details)}</div>` : ''}
            </div>
        `).join('');
    }
    
    // ÂèëÈÄÅÈîôËØØÂà∞ÊúçÂä°Âô®
    function sendErrorToServer(errorEntry) {
        const formData = new FormData();
        formData.append('error_type', errorEntry.type);
        formData.append('error_message', errorEntry.message);
        formData.append('error_details', JSON.stringify(errorEntry.details || {}));
        formData.append('error_url', errorEntry.url);
        formData.append('error_user_agent', errorEntry.userAgent);
        formData.append('error_timestamp', errorEntry.timestamp);
        
        // ÂèëÈÄÅÈîôËØØÊó•ÂøóÂà∞ÊúçÂä°Âô®
        fetch('/cgi-bin/luci/admin/system/filetransfer/log_error', {
            method: 'POST',
            body: formData
        }).catch(err => {
            console.error('Failed to send error to server:', err);
        });
    }
    
    // ÂÖ®Â±ÄÈîôËØØÂ§ÑÁêÜÂô®
    window.addEventListener('error', function(event) {
        addErrorLog('JavaScript Error', event.message, {
            filename: event.filename,
            lineno: event.lineno,
            colno: event.colno,
            error: event.error ? event.error.stack : null
        });
    });
    
    // Êú™Â§ÑÁêÜÁöÑPromiseÊãíÁªù
    window.addEventListener('unhandledrejection', function(event) {
        addErrorLog('Unhandled Promise Rejection', event.reason, {
            promise: event.promise
        });
    });
    
    // ÁΩëÁªúËØ∑Ê±ÇÈîôËØØÁõëÊéß
    const originalFetch = window.fetch;
    window.fetch = function(...args) {
        return originalFetch.apply(this, args).then(response => {
            if (!response.ok) {
                addErrorLog('HTTP Error', `HTTP ${response.status}: ${response.statusText}`, {
                    url: args[0],
                    status: response.status,
                    statusText: response.statusText
                });
            }
            return response;
        }).catch(error => {
            addErrorLog('Network Error', error.message, {
                url: args[0],
                error: error.toString()
            });
            throw error;
        });
    };
    
    // XMLHttpRequestÈîôËØØÁõëÊéß
    const originalXHROpen = XMLHttpRequest.prototype.open;
    const originalXHRSend = XMLHttpRequest.prototype.send;
    
    XMLHttpRequest.prototype.open = function(method, url, ...args) {
        this._xhrUrl = url;
        this._xhrMethod = method;
        return originalXHROpen.apply(this, [method, url, ...args]);
    };
    
    XMLHttpRequest.prototype.send = function(data) {
        const xhr = this;
        const originalOnReadyStateChange = xhr.onreadystatechange;
        
        xhr.onreadystatechange = function() {
            if (xhr.readyState === 4) {
                if (xhr.status >= 400) {
                    addErrorLog('XHR Error', `HTTP ${xhr.status}: ${xhr.statusText}`, {
                        url: xhr._xhrUrl,
                        method: xhr._xhrMethod,
                        status: xhr.status,
                        statusText: xhr.statusText,
                        responseText: xhr.responseText.substring(0, 500)
                    });
                }
            }
            
            if (originalOnReadyStateChange) {
                originalOnReadyStateChange.apply(xhr, arguments);
            }
        };
        
        return originalXHRSend.apply(this, [data]);
    };
    
    // ÂàùÂßãÂåñÈîôËØØÊó•ÂøóÈù¢Êùø
    createErrorLogPanel();
    
    // Ê∑ªÂä†ÈîÆÁõòÂø´Êç∑ÈîÆÊòæÁ§∫ÈîôËØØÊó•Âøó (Ctrl+Shift+E)
    document.addEventListener('keydown', function(event) {
        if (event.ctrlKey && event.shiftKey && event.key === 'E') {
            event.preventDefault();
            toggleErrorLog();
        }
    });
    
            // ÈîôËØØÁõëÊéßÁ≥ªÁªüÂ∑≤ÂêØÂä®
})();

document.addEventListener('DOMContentLoaded', function() {
    const uploadZone = document.getElementById('upload-zone');
    const fileInput = document.getElementById('fileInput');
    const progressContainer = document.getElementById('progress-container');
    const progressFill = document.getElementById('progress-fill');
    const progressText = document.getElementById('progress-text');
    const fileTableBody = document.getElementById('file-table-body');
    const fileSearch = document.getElementById('file-search');

    // ÊãñÊãΩ‰∏ä‰º†ÂäüËÉΩ
    uploadZone.addEventListener('dragover', function(e) {
        e.preventDefault();
        uploadZone.classList.add('dragover');
    });

    uploadZone.addEventListener('dragleave', function(e) {
        e.preventDefault();
        uploadZone.classList.remove('dragover');
    });

    uploadZone.addEventListener('drop', function(e) {
        e.preventDefault();
        uploadZone.classList.remove('dragover');
        const files = e.dataTransfer.files;
        if (files.length > 0) {
            uploadFiles(files);
        }
    });

    // ÁÇπÂáª‰∏ä‰º†
    fileInput.addEventListener('change', function() {
        if (this.files.length > 0) {
            uploadFiles(this.files);
        }
    });

    // ‰∏ä‰º†Êñá‰ª∂
    function uploadFiles(files) {
        Array.from(files).forEach(function(file) {
            uploadFile(file);
        });
    }

    function uploadFile(file) {
        progressContainer.style.display = 'block';
        progressFill.style.width = '0%';
        progressText.textContent = '0%';

        // ‰ΩøÁî®LuCIÁöÑÂÆòÊñπ‰∏ä‰º†API
        if (typeof LuCI !== 'undefined' && LuCI.ui && LuCI.ui.uploadFile) {
            LuCI.ui.uploadFile('<%=luci.dispatcher.build_url("admin", "system", "filetransfer", "upload")%>', file, {
                progress: function(ev) {
                    if (ev.lengthComputable) {
                        const percentComplete = (ev.loaded / ev.total) * 100;
                        progressFill.style.width = percentComplete + '%';
                        progressText.textContent = Math.round(percentComplete) + '%';
                    }
                }
            }).then(function(response) {
                progressContainer.style.display = 'none';
                if (response.ok) {
                    return response.json();
                } else {
                    throw new Error('Upload failed: ' + response.statusText);
                }
            }).then(function(data) {
                if (data.status === 'success') {
                    showMessage('<%:File upload successful%>', 'success');
                    refreshFileList();
                } else {
                    showMessage('<%:File upload failed:%> ' + (data.message || 'Unknown error'), 'error');
                }
            }).catch(function(error) {
                progressContainer.style.display = 'none';
                showMessage('<%:File upload failed:%> ' + error.message, 'error');
            });
        } else {
            // ÈôçÁ∫ßÂà∞‰º†ÁªüÁöÑXMLHttpRequestÊñπÊ≥ï
            const formData = new FormData();
            formData.append('file', file);
            formData.append('filename', file.name);

            const xhr = new XMLHttpRequest();

            xhr.upload.addEventListener('progress', function(e) {
                if (e.lengthComputable) {
                    const percentComplete = (e.loaded / e.total) * 100;
                    progressFill.style.width = percentComplete + '%';
                    progressText.textContent = Math.round(percentComplete) + '%';
                }
            });

            xhr.addEventListener('load', function() {
                progressContainer.style.display = 'none';
                if (xhr.status === 200) {
                    try {
                        const data = JSON.parse(xhr.responseText);
                        if (data.status === 'success') {
                            showMessage('<%:File upload successful%>', 'success');
                            refreshFileList();
                        } else {
                            showMessage('<%:File upload failed:%> ' + (data.message || xhr.responseText), 'error');
                        }
                    } catch (e) {
                        showMessage('<%:File upload successful%>', 'success');
                        refreshFileList();
                    }
                } else {
                    showMessage('<%:File upload failed:%> ' + xhr.responseText, 'error');
                }
            });

            xhr.addEventListener('error', function() {
                progressContainer.style.display = 'none';
                showMessage('<%:File upload failed%>', 'error');
            });

            xhr.open('POST', '<%=luci.dispatcher.build_url("admin", "system", "filetransfer", "upload")%>');
            xhr.send(formData);
        }
    }

    // Âà∑Êñ∞Êñá‰ª∂ÂàóË°®
    function refreshFileList() {
        fetch('<%=luci.dispatcher.build_url("admin", "system", "filetransfer", "list")%>')
            .then(response => response.json())
            .then(data => {
                updateFileTable(data.files || []);
            })
            .catch(error => {
                console.error('Error fetching file list:', error);
                showMessage('Failed to fetch file list', 'error');
            });
    }

    // Êõ¥Êñ∞Êñá‰ª∂Ë°®Ê†º
    function updateFileTable(files) {
        fileTableBody.innerHTML = '';
        
        if (files.length === 0) {
            const row = fileTableBody.insertRow();
            const cell = row.insertCell(0);
            cell.colSpan = 4;
            cell.style.textAlign = 'center';
            cell.style.padding = '40px';
            cell.style.color = '#999';
            cell.innerHTML = '<div style="font-size: 18px;">üìÅ</div><div style="margin-top: 10px;"><%:No files%></div>';
            return;
        }

        files.forEach(function(file) {
            const row = fileTableBody.insertRow();
            
            const nameCell = row.insertCell(0);
            const fname = (file.name || '').toString();
            const ext = fname.split('.').pop().toLowerCase();
            let icon = 'üìÑ';
            if (ext === 'ipk') icon = 'üì¶';
            else if (ext === 'zip' || ext === 'tar' || ext === 'gz') icon = 'üóúÔ∏è';
            else if (ext === 'txt' || ext === 'conf') icon = 'üìù';
            else if (ext === 'json') icon = 'üî¢';
            nameCell.innerHTML = `<span class="file-type-icon">${icon}</span><span title="${fname}">${fname}</span>`;
            
            const sizeCell = row.insertCell(1);
            sizeCell.textContent = formatFileSize(file.size);
            
            const mtimeCell = row.insertCell(2);
            mtimeCell.textContent = file.date || new Date().toLocaleString();
            
            const actionsCell = row.insertCell(3);
            const actionsDiv = document.createElement('div');
            actionsDiv.className = 'file-actions';
            
            // ‰∏ãËΩΩÊåâÈíÆ
            const downloadBtn = document.createElement('a');
            downloadBtn.href = '<%=luci.dispatcher.build_url("admin", "system", "filetransfer", "download")%>?filename=' + encodeURIComponent(file.name);
            downloadBtn.className = 'btn btn-success';
            downloadBtn.innerHTML = '<i class="icon-download"></i> <%:Download%>';
            downloadBtn.title = '<%:Download%>';
            actionsDiv.appendChild(downloadBtn);
            
            // Âà†Èô§ÊåâÈíÆ
            const deleteBtn = document.createElement('button');
            deleteBtn.className = 'btn btn-danger';
            deleteBtn.innerHTML = '<i class="icon-trash"></i> <%:Delete%>';
            deleteBtn.title = '<%:Delete%>';
            deleteBtn.onclick = function() {
                deleteFile(file.name);
            };
            actionsDiv.appendChild(deleteBtn);
            
            // IPK ÂÆâË£ÖÊåâÈíÆ
            if (file.name && file.name.toLowerCase().endsWith('.ipk')) {
                const installBtn = document.createElement('button');
                installBtn.className = 'btn btn-warning';
                installBtn.innerHTML = '<i class="icon-cog"></i> <%:Install%>';
                installBtn.title = '<%:Install IPK Package%>';
                installBtn.onclick = function() {
                    installPackage(file.name);
                };
                actionsDiv.appendChild(installBtn);
            }
            
            actionsCell.appendChild(actionsDiv);
        });
    }

    // Âà†Èô§Êñá‰ª∂
    function deleteFile(filename) {
        if (confirm('<%:Are you sure you want to delete file "%s"?%>'.replace('%s', filename))) {
            const formData = new FormData();
            formData.append('filename', filename);
            
            fetch('<%=luci.dispatcher.build_url("admin", "system", "filetransfer", "delete")%>', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    showMessage('<%:File deleted successfully%>', 'success');
                    refreshFileList();
                } else {
                    showMessage('<%:File deletion failed%>', 'error');
                }
            })
            .catch(error => {
                showMessage('<%:File deletion failed%>', 'error');
            });
        }
    }

    // ÂÆâË£ÖÂåÖ
    function installPackage(filename) {
        if (confirm('<%:Are you sure you want to install this IPK file?%>')) {
            const formData = new FormData();
            formData.append('filename', filename);
            
            fetch('<%=luci.dispatcher.build_url("admin", "system", "filetransfer", "install_ipk")%>', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    showMessage(data.message || '<%:Installation complete%>', 'success');
                } else {
                    showMessage('<%:Installation failed%>', 'error');
                }
            })
            .catch(error => {
                showMessage('<%:Installation failed%>', 'error');
            });
        }
    }

    // Ê∏ÖÁ©∫ÊâÄÊúâÊñá‰ª∂
    function clearAllFiles() {
        if (confirm('<%:Are you sure you want to delete all files?%>')) {
            fetch('<%=luci.dispatcher.build_url("admin", "system", "filetransfer", "clear_all")%>', {
                method: 'POST'
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    showMessage('<%:All files cleared successfully%>', 'success');
                    refreshFileList();
                } else {
                    showMessage('<%:Failed to clear files%>', 'error');
                }
            })
            .catch(error => {
                showMessage('<%:Failed to clear files%>', 'error');
            });
        }
    }

    // ÊòæÁ§∫Ê∂àÊÅØ
    function showMessage(message, type) {
        const messageDiv = document.createElement('div');
        messageDiv.className = 'message ' + type;
        messageDiv.textContent = message;
        document.body.appendChild(messageDiv);

        setTimeout(function() {
            if (messageDiv.parentNode) {
                messageDiv.parentNode.removeChild(messageDiv);
            }
        }, 5000);
    }

    // Ê†ºÂºèÂåñÊñá‰ª∂Â§ßÂ∞è
    function formatFileSize(bytes) {
        if (bytes === 0) return '0 B';
        const k = 1024;
        const sizes = ['B', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    // ÊêúÁ¥¢ÂäüËÉΩ
    fileSearch.addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase();
        const rows = fileTableBody.getElementsByTagName('tr');
        
        for (let i = 0; i < rows.length; i++) {
            const nameCell = rows[i].getElementsByTagName('td')[0];
            if (nameCell) {
                const filename = nameCell.textContent.toLowerCase();
                if (filename.includes(searchTerm)) {
                    rows[i].style.display = '';
                } else {
                    rows[i].style.display = 'none';
                }
            }
        }
    });

    // ÂÖ®Â±ÄÂáΩÊï∞
    window.refreshFileList = refreshFileList;

    // ÂàùÂßãÂä†ËΩΩÊñá‰ª∂ÂàóË°®
    refreshFileList();
});
</script>

<%+footer%> 