<%#
 Copyright 2024 DustReliant
 Licensed to the public under the MIT License.
-%>

<%+header%>

<div class="cbi-map">
    <h2 name="content"><%:File Transfer%></h2>
    
    <div class="cbi-section">
        <div class="cbi-section-descr"><%:Upload and manage files through Web interface%></div>
        
        <!-- Êñá‰ª∂‰∏ä‰º†Âå∫Âüü -->
        <div class="upload-area" id="upload-area">
            <div class="upload-zone" id="upload-zone">
                <div class="upload-icon">üìÅ</div>
                <p><%:Drag files here or click to upload%></p>
                <p class="upload-hint"><%:Supported file types: ipk, tar, gz, zip, txt, conf, json%></p>
                <p class="upload-hint"><%:Maximum file size: 50MB%></p>
                <input type="file" id="fileInput" multiple accept=".ipk,.tar,.gz,.zip,.txt,.conf,.json" style="display: none;" />
                <button class="btn btn-primary" onclick="document.getElementById('fileInput').click()">
                    <i class="icon-upload"></i> <%:Upload%>
                </button>
            </div>
            <div class="progress-container" id="progress-container" style="display: none;">
                <div class="progress-bar">
                    <div class="progress-fill" id="progress-fill"></div>
                </div>
                <span class="progress-text" id="progress-text">0%</span>
            </div>
        </div>
        
        <!-- Êñá‰ª∂ÂàóË°® -->
        <div class="file-list-section">
            <h3><%:File List%></h3>
            <div class="file-controls">
                <input type="text" id="file-search" placeholder="<%:Search files...%>">
                <button class="btn btn-secondary" onclick="refreshFileList()">
                    <i class="icon-refresh"></i> <%:Refresh%>
                </button>
            </div>
            <div class="file-table-container">
                <table class="file-table" id="file-table">
                    <thead>
                        <tr>
                            <th><%:File Name%></th>
                            <th><%:Size%></th>
                            <th><%:Modify Time%></th>
                            <th><%:Actions%></th>
                        </tr>
                    </thead>
                    <tbody id="file-table-body">
                        <!-- Êñá‰ª∂ÂàóË°®Â∞ÜÈÄöËøá JavaScript Âä®ÊÄÅÁîüÊàê -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<style>
.upload-area {
    margin: 20px 0;
}

.upload-zone {
    border: 2px dashed #ccc;
    border-radius: 8px;
    padding: 40px;
    text-align: center;
    background-color: #f9f9f9;
    transition: all 0.3s ease;
    cursor: pointer;
}

.upload-zone:hover,
.upload-zone.dragover {
    border-color: #007bff;
    background-color: #f0f8ff;
}

.upload-icon {
    font-size: 48px;
    margin-bottom: 20px;
    color: #007bff;
}

.upload-hint {
    font-size: 14px;
    color: #666;
    margin: 5px 0;
}

.btn {
    padding: 10px 20px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    text-decoration: none;
    display: inline-block;
    margin: 5px;
}

.btn-primary {
    background-color: #007bff;
    color: white;
}

.btn-secondary {
    background-color: #6c757d;
    color: white;
}

.btn-success {
    background-color: #28a745;
    color: white;
}

.btn-danger {
    background-color: #dc3545;
    color: white;
}

.btn:hover {
    opacity: 0.8;
}

.progress-container {
    margin-top: 20px;
}

.progress-bar {
    width: 100%;
    height: 20px;
    background-color: #e9ecef;
    border-radius: 10px;
    overflow: hidden;
    position: relative;
}

.progress-fill {
    height: 100%;
    background-color: #007bff;
    transition: width 0.3s ease;
    width: 0%;
}

.progress-text {
    display: block;
    text-align: center;
    margin-top: 5px;
    font-size: 14px;
}

.file-list-section {
    margin-top: 30px;
}

.file-controls {
    margin-bottom: 15px;
    display: flex;
    gap: 10px;
    align-items: center;
}

.file-controls input[type="text"] {
    flex: 1;
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 4px;
}

.file-table-container {
    overflow-x: auto;
}

.file-table {
    width: 100%;
    border-collapse: collapse;
    background-color: white;
}

.file-table th,
.file-table td {
    padding: 12px;
    text-align: left;
    border-bottom: 1px solid #ddd;
}

.file-table th {
    background-color: #f8f9fa;
    font-weight: bold;
    position: sticky;
    top: 0;
}

.file-table tr:hover {
    background-color: #f5f5f5;
}

.file-actions {
    display: flex;
    gap: 5px;
}

.file-actions .btn {
    padding: 5px 10px;
    font-size: 12px;
    margin: 0;
}

.message {
    padding: 15px;
    margin: 10px 0;
    border-radius: 4px;
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 1000;
    min-width: 300px;
}

.message.success {
    background-color: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
}

.message.error {
    background-color: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const uploadZone = document.getElementById('upload-zone');
    const fileInput = document.getElementById('fileInput');
    const progressContainer = document.getElementById('progress-container');
    const progressFill = document.getElementById('progress-fill');
    const progressText = document.getElementById('progress-text');
    const fileTableBody = document.getElementById('file-table-body');
    const fileSearch = document.getElementById('file-search');

    // ÊãñÊãΩ‰∏ä‰º†ÂäüËÉΩ
    uploadZone.addEventListener('dragover', function(e) {
        e.preventDefault();
        uploadZone.classList.add('dragover');
    });

    uploadZone.addEventListener('dragleave', function(e) {
        e.preventDefault();
        uploadZone.classList.remove('dragover');
    });

    uploadZone.addEventListener('drop', function(e) {
        e.preventDefault();
        uploadZone.classList.remove('dragover');
        const files = e.dataTransfer.files;
        handleFileUpload(files);
    });

    uploadZone.addEventListener('click', function() {
        fileInput.click();
    });

    fileInput.addEventListener('change', function() {
        handleFileUpload(this.files);
    });

    // Êñá‰ª∂‰∏ä‰º†Â§ÑÁêÜ
    function handleFileUpload(files) {
        if (files.length === 0) return;

        for (let i = 0; i < files.length; i++) {
            const file = files[i];
            if (!confirm('<%:Are you sure you want to upload file "%s"?%>'.replace('%s', file.name))) {
                continue;
            }
            uploadFile(file);
        }
    }

    function uploadFile(file) {
        const formData = new FormData();
        formData.append('file', file);

        const xhr = new XMLHttpRequest();

        xhr.upload.addEventListener('progress', function(e) {
            if (e.lengthComputable) {
                const percentComplete = Math.round((e.loaded / e.total) * 100);
                progressContainer.style.display = 'block';
                progressFill.style.width = percentComplete + '%';
                progressText.textContent = percentComplete + '%';
            }
        });

        xhr.addEventListener('load', function() {
            progressContainer.style.display = 'none';
            if (xhr.status === 200) {
                showMessage('<%:File upload successful%>', 'success');
                refreshFileList();
            } else {
                showMessage('<%:File upload failed:%> ' + xhr.responseText, 'error');
            }
        });

        xhr.addEventListener('error', function() {
            progressContainer.style.display = 'none';
            showMessage('<%:File upload failed%>', 'error');
        });

        xhr.open('POST', '<%=luci.dispatcher.build_url("admin", "filetransfer", "upload")%>');
        xhr.send(formData);
    }

    // Âà∑Êñ∞Êñá‰ª∂ÂàóË°®
    function refreshFileList() {
        fetch('<%=luci.dispatcher.build_url("admin", "filetransfer", "list")%>')
            .then(response => response.json())
            .then(data => {
                updateFileTable(data.files || []);
            })
            .catch(error => {
                console.error('Error fetching file list:', error);
                showMessage('Failed to fetch file list', 'error');
            });
    }

    // Êõ¥Êñ∞Êñá‰ª∂Ë°®Ê†º
    function updateFileTable(files) {
        fileTableBody.innerHTML = '';
        
        if (files.length === 0) {
            const row = fileTableBody.insertRow();
            const cell = row.insertCell(0);
            cell.colSpan = 4;
            cell.style.textAlign = 'center';
            cell.textContent = '<%:No files%>';
            return;
        }

        files.forEach(function(file) {
            const row = fileTableBody.insertRow();
            
            const nameCell = row.insertCell(0);
            nameCell.textContent = file.name;
            
            const sizeCell = row.insertCell(1);
            sizeCell.textContent = formatFileSize(file.size);
            
            const mtimeCell = row.insertCell(2);
            mtimeCell.textContent = new Date(file.mtime * 1000).toLocaleString();
            
            const actionsCell = row.insertCell(3);
            const actionsDiv = document.createElement('div');
            actionsDiv.className = 'file-actions';
            
            // ‰∏ãËΩΩÊåâÈíÆ
            const downloadBtn = document.createElement('a');
            downloadBtn.href = '<%=luci.dispatcher.build_url("admin", "filetransfer", "download")%>/' + encodeURIComponent(file.name);
            downloadBtn.className = 'btn btn-success';
            downloadBtn.innerHTML = '<i class="icon-download"></i> <%:Download%>';
            actionsDiv.appendChild(downloadBtn);
            
            // Âà†Èô§ÊåâÈíÆ
            const deleteBtn = document.createElement('button');
            deleteBtn.className = 'btn btn-danger';
            deleteBtn.innerHTML = '<i class="icon-trash"></i> <%:Delete%>';
            deleteBtn.onclick = function() {
                deleteFile(file.name);
            };
            actionsDiv.appendChild(deleteBtn);
            
            // IPK ÂÆâË£ÖÊåâÈíÆ
            if (file.name.endsWith('.ipk')) {
                const installBtn = document.createElement('button');
                installBtn.className = 'btn btn-primary';
                installBtn.textContent = '<%:Install%>';
                installBtn.onclick = function() {
                    installPackage(file.name);
                };
                actionsDiv.appendChild(installBtn);
            }
            
            actionsCell.appendChild(actionsDiv);
        });
    }

    // Âà†Èô§Êñá‰ª∂
    function deleteFile(filename) {
        if (confirm('<%:Are you sure you want to delete file "%s"?%>'.replace('%s', filename))) {
            fetch('<%=luci.dispatcher.build_url("admin", "filetransfer", "delete")%>/' + encodeURIComponent(filename), {
                method: 'POST'
            })
            .then(response => {
                if (response.ok) {
                    showMessage('<%:File deleted successfully%>', 'success');
                    refreshFileList();
                } else {
                    showMessage('<%:File deletion failed:%> ' + xhr.responseText, 'error');
                }
            })
            .catch(error => {
                showMessage('<%:File deletion failed%>', 'error');
            });
        }
    }

    // ÂÆâË£ÖÂåÖ
    function installPackage(filename) {
        if (confirm('<%:Are you sure you want to install this IPK file?%>')) {
            fetch('<%=luci.dispatcher.build_url("admin", "filetransfer", "install")%>/' + encodeURIComponent(filename), {
                method: 'POST'
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showMessage(data.message || '<%:Installation complete%>', 'success');
                } else {
                    showMessage('<%:Installation failed%>', 'error');
                }
            })
            .catch(error => {
                showMessage('<%:Installation failed%>', 'error');
            });
        }
    }

    // ÊòæÁ§∫Ê∂àÊÅØ
    function showMessage(message, type) {
        const messageDiv = document.createElement('div');
        messageDiv.className = 'message ' + type;
        messageDiv.textContent = message;
        document.body.appendChild(messageDiv);

        setTimeout(function() {
            if (messageDiv.parentNode) {
                messageDiv.parentNode.removeChild(messageDiv);
            }
        }, 5000);
    }

    // Ê†ºÂºèÂåñÊñá‰ª∂Â§ßÂ∞è
    function formatFileSize(bytes) {
        if (bytes === 0) return '0 B';
        const k = 1024;
        const sizes = ['B', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    // ÊêúÁ¥¢ÂäüËÉΩ
    fileSearch.addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase();
        const rows = fileTableBody.getElementsByTagName('tr');
        
        for (let i = 0; i < rows.length; i++) {
            const nameCell = rows[i].getElementsByTagName('td')[0];
            if (nameCell) {
                const filename = nameCell.textContent.toLowerCase();
                if (filename.includes(searchTerm)) {
                    rows[i].style.display = '';
                } else {
                    rows[i].style.display = 'none';
                }
            }
        }
    });

    // ÂÖ®Â±ÄÂáΩÊï∞
    window.refreshFileList = refreshFileList;

    // ÂàùÂßãÂä†ËΩΩÊñá‰ª∂ÂàóË°®
    refreshFileList();
});
</script>

<%+footer%> 