<%#
 Copyright 2024 DustReliant
 Licensed to the public under the MIT License.
-%>

<%+header%>

<div class="cbi-map">
    <h2 name="content"><%:Operation Logs%></h2>
    
    <div class="cbi-section">
        <div class="cbi-section-descr"><%:View file transfer system operation logs%></div>
        
        <div class="log-controls">
            <div class="control-group">
                <label for="log-level"><%:Log Level%></label>
                <select id="log-level" class="log-select">
                    <option value="all"><%:All Levels%></option>
                    <option value="info"><%:Info%></option>
                    <option value="warning"><%:Warning%></option>
                    <option value="error"><%:Error%></option>
                    <option value="debug"><%:Debug%></option>
                </select>
            </div>
            
            <div class="control-group">
                <label for="log-search"><%:Search%></label>
                <div class="search-box">
                    <i class="icon-search"></i>
                    <input type="text" id="log-search" placeholder="<%:Search logs...%>">
                </div>
            </div>
            
            <div class="control-group">
                <button class="btn btn-secondary" onclick="refreshLogs()" title="<%:Refresh logs%>">
                    <i class="icon-refresh"></i> <%:Refresh%>
                </button>
                <button class="btn btn-warning" onclick="clearLogs()" title="<%:Clear all logs%>">
                    <i class="icon-trash"></i> <%:Clear%>
                </button>
                <button class="btn btn-primary" onclick="exportLogs()" title="<%:Export logs to file%>">
                    <i class="icon-download"></i> <%:Export%>
                </button>
            </div>
        </div>
        
        <div class="log-stats">
            <div class="stat-item">
                <span class="stat-label"><%:Total Entries%></span>
                <span class="stat-value" id="total-entries">0</span>
            </div>
            <div class="stat-item">
                <span class="stat-label"><%:Info%></span>
                <span class="stat-value info" id="info-count">0</span>
            </div>
            <div class="stat-item">
                <span class="stat-label"><%:Warning%></span>
                <span class="stat-value warning" id="warning-count">0</span>
            </div>
            <div class="stat-item">
                <span class="stat-label"><%:Error%></span>
                <span class="stat-value error" id="error-count">0</span>
            </div>
        </div>
        
        <div class="log-container">
            <div class="log-content" id="log-content">
                <!-- Êó•ÂøóÂÜÖÂÆπÂ∞ÜÂú®ËøôÈáåÊòæÁ§∫ -->
            </div>
        </div>
    </div>
</div>

<style>
/* ÂÖ®Â±ÄÊ†∑Âºè */
.cbi-map {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    min-height: 100vh;
    padding: 20px;
}

.cbi-section {
    background: rgba(255, 255, 255, 0.95);
    border-radius: 20px;
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
    backdrop-filter: blur(10px);
    padding: 30px;
    margin-bottom: 30px;
}

.cbi-section-descr {
    color: #666;
    font-size: 16px;
    margin-bottom: 30px;
    text-align: center;
}

/* ÊéßÂà∂Âå∫ÂüüÊ†∑Âºè */
.log-controls {
    display: flex;
    gap: 20px;
    align-items: flex-end;
    margin-bottom: 25px;
    flex-wrap: wrap;
    padding: 20px;
    background: linear-gradient(135deg, #f8f9ff 0%, #e8f2ff 100%);
    border-radius: 15px;
    box-shadow: 0 5px 15px rgba(102, 126, 234, 0.1);
}

.control-group {
    display: flex;
    flex-direction: column;
    gap: 8px;
}

.control-group label {
    font-size: 12px;
    font-weight: 600;
    color: #667eea;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.log-select {
    padding: 10px 15px;
    border: 2px solid #e0e0e0;
    border-radius: 10px;
    background: white;
    font-size: 14px;
    transition: all 0.3s ease;
    min-width: 120px;
}

.log-select:focus {
    border-color: #667eea;
    outline: none;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
}

.search-box {
    position: relative;
    display: flex;
    align-items: center;
}

.search-box i {
    position: absolute;
    left: 15px;
    color: #999;
    font-size: 16px;
}

.search-box input[type="text"] {
    padding: 10px 15px 10px 45px;
    border: 2px solid #e0e0e0;
    border-radius: 10px;
    background: white;
    transition: all 0.3s ease;
    font-size: 14px;
    min-width: 250px;
}

.search-box input[type="text"]:focus {
    border-color: #667eea;
    outline: none;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
}

/* ÊåâÈíÆÊ†∑Âºè */
.btn {
    padding: 10px 16px;
    border: none;
    border-radius: 10px;
    cursor: pointer;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    gap: 6px;
    font-size: 13px;
    font-weight: 600;
    box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
}

.btn::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: left 0.5s;
}

.btn:hover::before {
    left: 100%;
}

.btn-primary {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
}

.btn-primary:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
}

.btn-secondary {
    background: linear-gradient(135deg, #6c757d 0%, #495057 100%);
    color: white;
}

.btn-secondary:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(108, 117, 125, 0.3);
}

.btn-warning {
    background: linear-gradient(135deg, #ffc107 0%, #fd7e14 100%);
    color: white;
}

.btn-warning:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(255, 193, 7, 0.3);
}

/* ÁªüËÆ°‰ø°ÊÅØÊ†∑Âºè */
.log-stats {
    display: flex;
    gap: 20px;
    margin-bottom: 25px;
    flex-wrap: wrap;
}

.stat-item {
    background: white;
    padding: 15px 20px;
    border-radius: 15px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
    display: flex;
    flex-direction: column;
    align-items: center;
    min-width: 100px;
    transition: all 0.3s ease;
}

.stat-item:hover {
    transform: translateY(-3px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
}

.stat-label {
    font-size: 12px;
    color: #666;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    margin-bottom: 5px;
}

.stat-value {
    font-size: 24px;
    font-weight: 700;
    color: #333;
}

.stat-value.info {
    color: #17a2b8;
}

.stat-value.warning {
    color: #ffc107;
}

.stat-value.error {
    color: #dc3545;
}

/* Êó•ÂøóÂÆπÂô®Ê†∑Âºè */
.log-container {
    border: 2px solid #e0e0e0;
    border-radius: 15px;
    background: white;
    max-height: 600px;
    overflow-y: auto;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
}

.log-content {
    padding: 20px;
    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
    font-size: 13px;
    line-height: 1.6;
    white-space: pre-wrap;
    color: #333;
}

.log-entry {
    margin-bottom: 2px;
    padding: 6px 12px;
    border-radius: 6px;
    border-left: 3px solid;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
    line-height: 1.4;
}

.log-entry::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
    transform: translateX(-100%);
    transition: transform 0.5s;
}

.log-entry:hover::before {
    transform: translateX(100%);
}

.log-entry.info {
    background: linear-gradient(135deg, #d1ecf1 0%, #bee5eb 100%);
    border-left-color: #17a2b8;
}

.log-entry.warning {
    background: linear-gradient(135deg, #fff3cd 0%, #ffeaa7 100%);
    border-left-color: #ffc107;
}

.log-entry.error {
    background: linear-gradient(135deg, #f8d7da 0%, #f5c6cb 100%);
    border-left-color: #dc3545;
}

.log-entry.debug {
    background: linear-gradient(135deg, #e2e3e5 0%, #d6d8db 100%);
    border-left-color: #6c757d;
}

.log-timestamp {
    color: #666;
    font-weight: 600;
    font-size: 12px;
    display: inline-block;
    margin-right: 10px;
    background: rgba(255, 255, 255, 0.5);
    padding: 2px 6px;
    border-radius: 4px;
}

.log-level {
    display: inline-block;
    padding: 3px 8px;
    border-radius: 6px;
    font-size: 10px;
    font-weight: 700;
    text-transform: uppercase;
    margin-right: 10px;
    letter-spacing: 0.5px;
}

.log-level.info {
    background: linear-gradient(135deg, #17a2b8 0%, #138496 100%);
    color: white;
}

.log-level.warning {
    background: linear-gradient(135deg, #ffc107 0%, #e0a800 100%);
    color: #212529;
}

.log-level.error {
    background: linear-gradient(135deg, #dc3545 0%, #c82333 100%);
    color: white;
}

.log-level.debug {
    background: linear-gradient(135deg, #6c757d 0%, #5a6268 100%);
    color: white;
}

.log-message {
    color: #333;
    font-weight: 500;
}

.no-logs {
    text-align: center;
    color: #999;
    font-style: italic;
    margin: 40px 0;
    font-size: 16px;
}

.no-logs::before {
    content: 'üìã';
    display: block;
    font-size: 48px;
    margin-bottom: 15px;
}

/* ÊªöÂä®Êù°Ê†∑Âºè */
.log-container::-webkit-scrollbar {
    width: 8px;
}

.log-container::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 4px;
}

.log-container::-webkit-scrollbar-thumb {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border-radius: 4px;
}

.log-container::-webkit-scrollbar-thumb:hover {
    background: linear-gradient(135deg, #764ba2 0%, #667eea 100%);
}

/* ÂìçÂ∫îÂºèËÆæËÆ° */
@media (max-width: 768px) {
    .cbi-section {
        padding: 20px;
        margin: 10px;
    }
    
    .log-controls {
        flex-direction: column;
        align-items: stretch;
        gap: 15px;
    }
    
    .control-group {
        align-items: stretch;
    }
    
    .search-box input[type="text"] {
        min-width: auto;
        width: 100%;
    }
    
    .log-stats {
        justify-content: center;
    }
    
    .stat-item {
        min-width: 80px;
        padding: 10px 15px;
    }
    
    .stat-value {
        font-size: 20px;
    }
    
    .log-content {
        padding: 15px;
        font-size: 12px;
    }
}

/* Ê∑±Ëâ≤Ê®°ÂºèÊîØÊåÅ */
@media (prefers-color-scheme: dark) {
    .cbi-section {
        background: rgba(30, 30, 30, 0.95);
        color: #fff;
    }
    
    .log-controls {
        background: linear-gradient(135deg, #2a2a2a 0%, #1a1a1a 100%);
    }
    
    .log-container {
        background: #2a2a2a;
        border-color: #444;
    }
    
    .log-content {
        color: #fff;
    }
    
    .stat-item {
        background: #2a2a2a;
        color: #fff;
    }
    
    .log-entry {
        color: #fff;
    }
    
    .log-entry.info {
        background: linear-gradient(135deg, #1a3a3f 0%, #0f2a2f 100%);
    }
    
    .log-entry.warning {
        background: linear-gradient(135deg, #3a2f0f 0%, #2a1f0f 100%);
    }
    
    .log-entry.error {
        background: linear-gradient(135deg, #3a0f0f 0%, #2a0f0f 100%);
    }
    
    .log-entry.debug {
        background: linear-gradient(135deg, #2a2a2a 0%, #1a1a1a 100%);
    }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const logContent = document.getElementById('log-content');
    const logLevel = document.getElementById('log-level');
    const logSearch = document.getElementById('log-search');
    
    let allLogs = [];
    
    // Âä†ËΩΩÊó•Âøó
    function loadLogs() {
        fetch('<%=luci.dispatcher.build_url("admin", "system", "filetransfer", "get_logs")%>')
            .then(response => response.json())
            .then(data => {
                allLogs = parseLogs(data);
                displayLogs();
                updateStats();
            })
            .catch(error => {
                console.error('Error loading logs:', error);
                logContent.innerHTML = '<div class="no-logs">Failed to load logs</div>';
            });
    }
    
    // Ëß£ÊûêÊó•Âøó
    function parseLogs(logData) {
        if (!Array.isArray(logData)) {
            logData = [logData];
        }
        
        return logData.map(line => {
            const match = line.match(/^(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}) \[(\w+)\] (.+)$/);
            if (match) {
                return {
                    timestamp: match[1],
                    level: match[2].toLowerCase(),
                    message: match[3],
                    raw: line
                };
            }
            return {
                timestamp: '',
                level: 'info',
                message: line,
                raw: line
            };
        });
    }
    
    // ÊòæÁ§∫Êó•Âøó
    function displayLogs() {
        const selectedLevel = logLevel.value;
        const searchTerm = logSearch.value.toLowerCase();
        
        const filteredLogs = allLogs.filter(log => {
            const levelMatch = selectedLevel === 'all' || log.level === selectedLevel;
            const searchMatch = log.message.toLowerCase().includes(searchTerm) || 
                              log.timestamp.toLowerCase().includes(searchTerm);
            return levelMatch && searchMatch;
        });
        
        if (filteredLogs.length === 0) {
            logContent.innerHTML = '<div class="no-logs">No logs found</div>';
            return;
        }
        
        logContent.innerHTML = filteredLogs.map(log => `
            <div class="log-entry ${log.level}">
                <span class="log-timestamp">${log.timestamp}</span>
                <span class="log-level ${log.level}">${log.level}</span>
                <span class="log-message">${log.message}</span>
            </div>
        `).join('');
    }
    
    // Êõ¥Êñ∞ÁªüËÆ°‰ø°ÊÅØ
    function updateStats() {
        const total = allLogs.length;
        const info = allLogs.filter(log => log.level === 'info').length;
        const warning = allLogs.filter(log => log.level === 'warning').length;
        const error = allLogs.filter(log => log.level === 'error').length;
        
        document.getElementById('total-entries').textContent = total;
        document.getElementById('info-count').textContent = info;
        document.getElementById('warning-count').textContent = warning;
        document.getElementById('error-count').textContent = error;
    }
    
    // Âà∑Êñ∞Êó•Âøó
    window.refreshLogs = function() {
        loadLogs();
    };
    
    // Ê∏ÖÁ©∫Êó•Âøó
    window.clearLogs = function() {
        if (confirm('<%:Are you sure you want to clear all logs?%>')) {
            fetch('<%=luci.dispatcher.build_url("admin", "system", "filetransfer", "clear_logs")%>', {
                method: 'POST'
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    showMessage('<%:Logs cleared successfully%>', 'success');
                    loadLogs();
                } else {
                    showMessage('<%:Failed to clear logs%>', 'error');
                }
            })
            .catch(error => {
                showMessage('<%:Failed to clear logs%>', 'error');
            });
        }
    };
    
    // ÂØºÂá∫Êó•Âøó
    window.exportLogs = function() {
        window.open('<%=luci.dispatcher.build_url("admin", "system", "filetransfer", "export_logs")%>', '_blank');
    };
    
    // ÊòæÁ§∫Ê∂àÊÅØ
    function showMessage(message, type) {
        const messageDiv = document.createElement('div');
        messageDiv.className = 'message ' + type;
        messageDiv.textContent = message;
        document.body.appendChild(messageDiv);

        setTimeout(function() {
            if (messageDiv.parentNode) {
                messageDiv.parentNode.removeChild(messageDiv);
            }
        }, 5000);
    }
    
    // ‰∫ã‰ª∂ÁõëÂê¨Âô®
    logLevel.addEventListener('change', displayLogs);
    logSearch.addEventListener('input', displayLogs);
    
    // ÂàùÂßãÂä†ËΩΩ
    loadLogs();
    
    // Ëá™Âä®Âà∑Êñ∞ÔºàÊØè30ÁßíÔºâ
    setInterval(loadLogs, 30000);
});
</script>

<%+footer%> 