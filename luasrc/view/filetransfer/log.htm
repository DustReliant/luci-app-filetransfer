<%#
 Copyright 2024 DustReliant
 Licensed to the public under the MIT License.
-%>

<%+header%>

<div class="cbi-map">
    <h2 name="content"><%:Operation Logs%></h2>
    
    <div class="cbi-section">
        <div class="cbi-section-descr"><%:View file transfer system operation logs%></div>
        
        <div class="log-controls">
            <select id="log-level">
                <option value="all"><%:All Levels%></option>
                <option value="info"><%:Info%></option>
                <option value="warning"><%:Warning%></option>
                <option value="error"><%:Error%></option>
            </select>
            <input type="text" id="log-search" placeholder="<%:Search logs...%>">
            <button onclick="clearLogs()"><%:Clear Logs%></button>
            <button onclick="exportLogs()"><%:Export Logs%></button>
        </div>
        
        <div class="log-container">
            <div class="log-content" id="log-content">
                <!-- 日志内容将在这里显示 -->
            </div>
        </div>
    </div>
</div>

<style>
.log-controls {
    margin-bottom: 20px;
    display: flex;
    gap: 10px;
    align-items: center;
    flex-wrap: wrap;
}

.log-controls select,
.log-controls input {
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 4px;
}

.log-controls input[type="text"] {
    flex: 1;
    min-width: 200px;
}

.log-controls button {
    padding: 8px 16px;
    border: none;
    border-radius: 4px;
    background-color: #007bff;
    color: white;
    cursor: pointer;
}

.log-controls button:hover {
    background-color: #0056b3;
}

.log-container {
    border: 1px solid #ddd;
    border-radius: 4px;
    background-color: #f8f9fa;
    max-height: 600px;
    overflow-y: auto;
}

.log-content {
    padding: 15px;
    font-family: 'Courier New', monospace;
    font-size: 12px;
    line-height: 1.4;
    white-space: pre-wrap;
    color: #333;
}

.log-entry {
    margin-bottom: 5px;
    padding: 5px;
    border-radius: 3px;
}

.log-entry.info {
    background-color: #d1ecf1;
    border-left: 3px solid #17a2b8;
}

.log-entry.warning {
    background-color: #fff3cd;
    border-left: 3px solid #ffc107;
}

.log-entry.error {
    background-color: #f8d7da;
    border-left: 3px solid #dc3545;
}

.log-entry.debug {
    background-color: #e2e3e5;
    border-left: 3px solid #6c757d;
}

.log-timestamp {
    color: #666;
    font-weight: bold;
}

.log-level {
    display: inline-block;
    padding: 2px 6px;
    border-radius: 3px;
    font-size: 10px;
    font-weight: bold;
    text-transform: uppercase;
    margin-right: 5px;
}

.log-level.info {
    background-color: #17a2b8;
    color: white;
}

.log-level.warning {
    background-color: #ffc107;
    color: #212529;
}

.log-level.error {
    background-color: #dc3545;
    color: white;
}

.log-level.debug {
    background-color: #6c757d;
    color: white;
}

.no-logs {
    text-align: center;
    color: #666;
    font-style: italic;
    margin: 20px 0;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const logContent = document.getElementById('log-content');
    const logLevel = document.getElementById('log-level');
    const logSearch = document.getElementById('log-search');
    
    let allLogs = [];
    
    // 加载日志
    function loadLogs() {
        fetch('<%=luci.dispatcher.build_url("admin", "filetransfer", "logs")%>')
            .then(response => response.text())
            .then(data => {
                allLogs = parseLogs(data);
                displayLogs();
            })
            .catch(error => {
                console.error('Error loading logs:', error);
                logContent.innerHTML = '<div class="no-logs">Failed to load logs</div>';
            });
    }
    
    // 解析日志
    function parseLogs(logData) {
        const lines = logData.split('\n').filter(line => line.trim());
        return lines.map(line => {
            const match = line.match(/^(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}) \[(\w+)\] (.+)$/);
            if (match) {
                return {
                    timestamp: match[1],
                    level: match[2].toLowerCase(),
                    message: match[3],
                    raw: line
                };
            }
            return {
                timestamp: '',
                level: 'info',
                message: line,
                raw: line
            };
        });
    }
    
    // 显示日志
    function displayLogs() {
        const selectedLevel = logLevel.value;
        const searchTerm = logSearch.value.toLowerCase();
        
        let filteredLogs = allLogs;
        
        // 按级别过滤
        if (selectedLevel !== 'all') {
            filteredLogs = filteredLogs.filter(log => log.level === selectedLevel);
        }
        
        // 按搜索词过滤
        if (searchTerm) {
            filteredLogs = filteredLogs.filter(log => 
                log.message.toLowerCase().includes(searchTerm) ||
                log.timestamp.includes(searchTerm)
            );
        }
        
        if (filteredLogs.length === 0) {
            logContent.innerHTML = '<div class="no-logs">No logs found</div>';
            return;
        }
        
        const logHtml = filteredLogs.map(log => {
            return `<div class="log-entry ${log.level}">
                <span class="log-timestamp">${log.timestamp}</span>
                <span class="log-level ${log.level}">${log.level}</span>
                <span class="log-message">${escapeHtml(log.message)}</span>
            </div>`;
        }).join('');
        
        logContent.innerHTML = logHtml;
        
        // 自动滚动到底部
        logContent.scrollTop = logContent.scrollHeight;
    }
    
    // HTML 转义
    function escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
    
    // 事件监听
    logLevel.addEventListener('change', displayLogs);
    logSearch.addEventListener('input', displayLogs);
    
    // 定期刷新日志
    setInterval(loadLogs, 5000);
    
    // 初始加载
    loadLogs();
});

// 清除日志
function clearLogs() {
    if (confirm('<%:Are you sure you want to clear all logs?%>')) {
        fetch('<%=luci.dispatcher.build_url("admin", "filetransfer", "clear_logs")%>', {
            method: 'POST'
        })
        .then(response => {
            if (response.ok) {
                document.getElementById('log-content').innerHTML = '<div class="no-logs">Logs cleared</div>';
            } else {
                alert('Failed to clear logs');
            }
        })
        .catch(error => {
            alert('Failed to clear logs');
        });
    }
}

// 导出日志
function exportLogs() {
    fetch('<%=luci.dispatcher.build_url("admin", "filetransfer", "export_logs")%>')
        .then(response => response.blob())
        .then(blob => {
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'filetransfer_logs_' + new Date().toISOString().slice(0, 10) + '.txt';
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
        })
        .catch(error => {
            alert('Failed to export logs');
        });
}
</script>

<%+footer%> 